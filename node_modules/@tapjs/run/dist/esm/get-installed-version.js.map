{"version":3,"file":"get-installed-version.js","sourceRoot":"","sources":["../../src/get-installed-version.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,YAAY,EAAE,MAAM,IAAI,CAAA;AAEjC,OAAO,EAAE,OAAO,EAAE,MAAM,MAAM,CAAA;AAE9B;;GAEG;AACH,MAAM,CAAC,MAAM,mBAAmB,GAAG,CACjC,IAAY,EACZ,MAAoB,EACpB,EAAE;IACF,MAAM,EAAE,GAAG,OAAO,CAChB,MAAM,CAAC,WAAW,EAClB,MAAM,EACN,SAAS,EACT,cAAc,EACd,IAAI,EACJ,cAAc,CACf,CAAA;IACD,IAAI,CAAC;QACH,OAAQ,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,EAAE,EAAE,MAAM,CAAC,CAAc,CAAC,OAAO,CAAA;IACnE,CAAC;IAAC,MAAM,CAAC;QACP,OAAO,EAAE,CAAA;IACX,CAAC;AACH,CAAC,CAAA","sourcesContent":["import { LoadedConfig } from '@tapjs/config'\nimport { readFileSync } from 'fs'\nimport { Manifest } from 'pacote'\nimport { resolve } from 'path'\n\n/**\n * get the versions of a package that is installed at top level\n */\nexport const getInstalledVersion = (\n  name: string,\n  config: LoadedConfig,\n) => {\n  const pj = resolve(\n    config.projectRoot,\n    '.tap',\n    'plugins',\n    'node_modules',\n    name,\n    'package.json',\n  )\n  try {\n    return (JSON.parse(readFileSync(pj, 'utf8')) as Manifest).version\n  } catch {\n    return ''\n  }\n}\n"]}