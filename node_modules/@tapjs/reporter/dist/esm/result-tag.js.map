{"version":3,"file":"result-tag.js","sourceRoot":"","sources":["../../src/result-tag.tsx"],"names":[],"mappings":"AACA,OAAO,EAAE,GAAG,EAAE,IAAI,EAAE,MAAM,KAAK,CAAA;AAC/B,OAAO,KAAa,MAAM,OAAO,CAAA;AAEjC,OAAO,EAAE,UAAU,EAAE,MAAM,kBAAkB,CAAA;AAC7C,OAAO,EAAE,aAAa,EAAE,MAAM,qBAAqB,CAAA;AAQnD,MAAM,CAAC,MAAM,SAAS,GAAmB,CAAC,EACxC,MAAM,EACN,OAAO,GAAG,KAAK,EACf,IAAI,GACL,EAAE,EAAE;IACH,MAAM,YAAY,GAAG,CAAC,OAAO,CAAA;IAC7B,MAAM,CAAC,GACL,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG;QACjB,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG;YACnB,CAAC,CAAC,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG;gBAClB,CAAC,CAAC,GAAG,CAAA;IACP,MAAM,KAAK,GACT,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM;QACpB,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,SAAS;YACzB,CAAC,CAAC,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK;gBACpB,CAAC,CAAC,OAAO,CAAA;IACX,MAAM,IAAI,GAAG,CACX,oBAAC,IAAI,IAAC,IAAI,QAAC,KAAK,EAAE,KAAK,IACpB,CAAC,CACG,CACR,CAAA;IACD,IAAI,EAAE,GAAG,MAAM,CAAC,IAAI,IAAI,MAAM,CAAC,IAAI,IAAI,MAAM,CAAC,QAAQ,CAAA;IACtD,MAAM,IAAI,GACR,OAAO,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC,oBAAC,IAAI,IAAC,KAAK,EAAE,KAAK,IAAG,EAAE,CAAQ,CAAC,CAAC,CAAC,yCAAK,CAAA;IAClE,MAAM,EAAE,GAAG,MAAM,CAAC,IAAI,EAAE,EAAE,CAAA;IAC1B,MAAM,QAAQ,GAAG,EAAE,EAAE,QAAQ,CAAA;IAC7B,MAAM,QAAQ,GACZ,YAAY,IAAI,EAAE,IAAI,QAAQ,CAAC,CAAC;QAC9B,oBAAC,IAAI,IAAC,QAAQ;YACX,QAAQ;YACR,EAAE,CAAC,UAAU,IAAI,EAAE,CAAC,YAAY,CAAC,CAAC;gBACjC,IAAI,EAAE,CAAC,UAAU,IAAI,EAAE,CAAC,YAAY,EAAE;gBACxC,CAAC,CAAC,EAAE,CACC;QACT,CAAC,CAAC,yCAAK,CAAA;IACT,MAAM,IAAI,GAAG,UAAU,CAAC,MAAM,EAAE,IAAI,CAAC,CAAA;IAErC,OAAO,CACL,oBAAC,GAAG,IAAC,aAAa,EAAC,QAAQ;QACzB,oBAAC,GAAG,IAAC,GAAG,EAAE,CAAC,EAAE,WAAW,EAAE,CAAC;YACxB,IAAI;YACL,oBAAC,IAAI,QAAE,IAAI,CAAQ;YAClB,IAAI;YACJ,QAAQ,CACL;QACL,CAAC,CAAC,OAAO,IAAI,oBAAC,aAAa,IAAC,MAAM,EAAE,MAAM,GAAI,CAC3C,CACP,CAAA;AACH,CAAC,CAAA","sourcesContent":["import { Base } from '@tapjs/core'\nimport { Box, Text } from 'ink'\nimport React, { FC } from 'react'\nimport { Result } from 'tap-parser'\nimport { assertName } from './assert-name.js'\nimport { ResultDetails } from './result-details.js'\n\nexport interface ResultOpts {\n  result: Result\n  details?: boolean\n  test: Base\n}\n\nexport const ResultTag: FC<ResultOpts> = ({\n  result,\n  details = false,\n  test,\n}) => {\n  const showCallsite = !details\n  const c =\n    result.skip ? '~'\n    : result.todo ? '☐'\n    : !result.ok ? '✖'\n    : '✓'\n  const textc =\n    result.skip ? 'cyan'\n    : result.todo ? 'magenta'\n    : !result.ok ? 'red'\n    : 'green'\n  const pref = (\n    <Text bold color={textc}>\n      {c}\n    </Text>\n  )\n  let st = result.skip || result.todo || result.tapError\n  const suff =\n    typeof st === 'string' ? <Text color={textc}>{st}</Text> : <></>\n  const at = result.diag?.at\n  const fileName = at?.fileName\n  const callsite =\n    showCallsite && at && fileName ?\n      <Text dimColor>\n        {fileName}\n        {at.lineNumber && at.columnNumber ?\n          `:${at.lineNumber}:${at.columnNumber}`\n        : ''}\n      </Text>\n    : <></>\n  const name = assertName(result, test)\n\n  return (\n    <Box flexDirection=\"column\">\n      <Box gap={1} paddingLeft={1}>\n        {pref}\n        <Text>{name}</Text>\n        {suff}\n        {callsite}\n      </Box>\n      {!!details && <ResultDetails result={result} />}\n    </Box>\n  )\n}\n"]}