{"version":3,"file":"stack.js","sourceRoot":"","sources":["../../src/stack.tsx"],"names":[],"mappings":"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","sourcesContent":["// @tapjs/stack makes stack traces a bit nicer, but we can do even better\n// with some colors and highlighting.\n\nimport { CallSiteLike, parseStack } from '@tapjs/stack'\nimport chalk from 'chalk'\nimport { Box, Text } from 'ink'\nimport { isAbsolute } from 'path'\nimport React, { FC } from 'react'\nimport { stringify } from 'tap-yaml'\nimport { HangingIndent } from './hanging-indent.js'\n\n// only show generated callsite info if it's not ours\n// it's useful to know where to start throwing console.logs, but\n// if it's our own code, it's just noise.\n// Treat ./node_modules as \"absolute\" for this purpose, since deps\n// aren't \"local\" in the same sense, even though they live in cwd.\nconst relativeOrMissing = (p?: string | null) =>\n  !p || !(isAbsolute(p) || p.startsWith('node_modules'))\nconst removeRelativeGenerated = (c?: CallSiteLike | null) => {\n  if (c && relativeOrMissing(c.fileName)) c.generated = undefined\n}\n\n// Only highlight *our* filenames, not those from deps or outside paths.\n// We use chalk.dim() directly here, because neighboring Text nodes get\n// squashed together.\nconst highlightFilename = (s: string, f?: string | null) => {\n  if (\n    !f ||\n    f === 'native' ||\n    f === '<anonymous>' ||\n    isAbsolute(f) ||\n    f.startsWith('..') ||\n    !s.includes(f)\n  ) {\n    return <Text>{chalk.dim(s)}</Text>\n  }\n  const split = s.split(f)\n  const last = split[split.length - 1]\n  split.pop()\n  return (\n    <Text>\n      {split\n        .map(s => `${chalk.dim(s)}${chalk.yellowBright(f)}`)\n        .join('') + chalk.dim(last)}\n    </Text>\n  )\n}\n\nconst isUseful = (c: CallSiteLike) =>\n  !!c.lineNumber || !!c.columnNumber || !!c.fileName\n\nexport const Stack: FC<{ stack?: string }> = ({ stack }) => {\n  if (!stack?.trim()) return <></>\n\n  const p = parseStack(stack)\n  if (!p.length) return <></>\n\n  const st = p\n    .map(c => String(c))\n    .join('\\n')\n    .replace(/\\n+$/, '')\n    .split('\\n')\n    .map(l => {\n      const c = new CallSiteLike(null, l)\n      removeRelativeGenerated(c)\n      removeRelativeGenerated(c.evalOrigin)\n      if (!isUseful(c)) return undefined\n      return c\n    })\n    .filter(c => !!c)\n    .map(c =>\n      highlightFilename(\n        String(c),\n        c?.evalOrigin ? c?.evalOrigin.fileName : c?.fileName,\n      ),\n    )\n  // if nothing useful was found, just show the string\n  const showRaw = !st.length && { stack }\n\n  return (\n    <Box flexDirection=\"column\">\n      {st.length ?\n        st.map((line, key) => (\n          <HangingIndent key={key}>{line}</HangingIndent>\n        ))\n      : showRaw ?\n        <Text dimColor>{stringify(showRaw).trimEnd()}</Text>\n      : /* c8 ignore next - impossible */ <></>}\n    </Box>\n  )\n}\n"]}